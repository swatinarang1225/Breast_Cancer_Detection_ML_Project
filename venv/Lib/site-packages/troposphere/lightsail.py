# Copyright (c) 2012-2021, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 46.0.0


from troposphere import Tags

from . import AWSObject, AWSProperty
from .validators import boolean, integer


class RelationalDatabaseParameter(AWSProperty):
    props = {
        "AllowedValues": (str, False),
        "ApplyMethod": (str, False),
        "ApplyType": (str, False),
        "DataType": (str, False),
        "Description": (str, False),
        "IsModifiable": (boolean, False),
        "ParameterName": (str, False),
        "ParameterValue": (str, False),
    }


class Database(AWSObject):
    resource_type = "AWS::Lightsail::Database"

    props = {
        "AvailabilityZone": (str, False),
        "BackupRetention": (boolean, False),
        "CaCertificateIdentifier": (str, False),
        "MasterDatabaseName": (str, True),
        "MasterUserPassword": (str, False),
        "MasterUsername": (str, True),
        "PreferredBackupWindow": (str, False),
        "PreferredMaintenanceWindow": (str, False),
        "PubliclyAccessible": (boolean, False),
        "RelationalDatabaseBlueprintId": (str, True),
        "RelationalDatabaseBundleId": (str, True),
        "RelationalDatabaseName": (str, True),
        "RelationalDatabaseParameters": ([RelationalDatabaseParameter], False),
        "RotateMasterUserPassword": (boolean, False),
        "Tags": (Tags, False),
    }


class AutoSnapshotAddOn(AWSProperty):
    props = {
        "SnapshotTimeOfDay": (str, False),
    }


class AddOn(AWSProperty):
    props = {
        "AddOnType": (str, True),
        "AutoSnapshotAddOnRequest": (AutoSnapshotAddOn, False),
        "Status": (str, False),
    }


class Disk(AWSObject):
    resource_type = "AWS::Lightsail::Disk"

    props = {
        "AddOns": ([AddOn], False),
        "AvailabilityZone": (str, False),
        "DiskName": (str, True),
        "SizeInGb": (integer, True),
        "Tags": (Tags, False),
    }


class Hardware(AWSProperty):
    props = {
        "CpuCount": (integer, False),
        "Disks": ([Disk], False),
        "RamSizeInGb": (integer, False),
    }


class Location(AWSProperty):
    props = {
        "AvailabilityZone": (str, False),
        "RegionName": (str, False),
    }


class MonthlyTransfer(AWSProperty):
    props = {
        "GbPerMonthAllocated": (str, False),
    }


class Port(AWSProperty):
    props = {
        "AccessDirection": (str, False),
        "AccessFrom": (str, False),
        "AccessType": (str, False),
        "CidrListAliases": ([str], False),
        "Cidrs": ([str], False),
        "CommonName": (str, False),
        "FromPort": (integer, False),
        "Ipv6Cidrs": ([str], False),
        "Protocol": (str, False),
        "ToPort": (integer, False),
    }


class Networking(AWSProperty):
    props = {
        "MonthlyTransfer": (MonthlyTransfer, False),
        "Ports": ([Port], True),
    }


class State(AWSProperty):
    props = {
        "Code": (integer, False),
        "Name": (str, False),
    }


class Instance(AWSObject):
    resource_type = "AWS::Lightsail::Instance"

    props = {
        "AddOns": ([AddOn], False),
        "AvailabilityZone": (str, False),
        "BlueprintId": (str, True),
        "BundleId": (str, True),
        "Hardware": (Hardware, False),
        "InstanceName": (str, True),
        "KeyPairName": (str, False),
        "Location": (Location, False),
        "Networking": (Networking, False),
        "State": (State, False),
        "Tags": (Tags, False),
        "UserData": (str, False),
    }


class StaticIp(AWSObject):
    resource_type = "AWS::Lightsail::StaticIp"

    props = {
        "AttachedTo": (str, False),
        "StaticIpName": (str, True),
    }
